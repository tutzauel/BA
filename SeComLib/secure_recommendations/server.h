/*
SeComLib
Copyright 2012-2013 TU Delft, Information Security & Privacy Lab (http://isplab.tudelft.nl/)

Contributors:
Inald Lagendijk (R.L.Lagendijk@TUDelft.nl)
Mihai Todor (todormihai@gmail.com)
Thijs Veugen (P.J.M.Veugen@tudelft.nl)
Zekeriya Erkin (z.erkin@tudelft.nl)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/**
@file secure_recommendations/server.h
@brief Definition of class Server.
@author Mihai Todor (todormihai@gmail.com)
*/

#ifndef SERVER_HEADER_GUARD
#define SERVER_HEADER_GUARD

//include our headers
#include "utils/config.h"
#include "utils/filesystem.h"
#include "core/big_integer.h"
#include "core/random_provider.h"
#include "core/paillier.h"
#include "core/secure_permutation.h"

#include "hub.h"
#include "secure_svm.h"
#include "test_data_row.h"

//include C++ libraries
#include <string>
#include <vector>
#include <deque>
#include <sstream>
#include <stdexcept>

namespace SeComLib {
using namespace Core;

namespace SecureRecommendations {
	//forward-declare required classes
	class Hub;

	/**
	@brief Medical Recommendations Server
	*/
	//we need a reference to the Server object in the SecureSvm instances, so we make use of shared_from_this() when instantiating SecureSvm
	class Server : public std::enable_shared_from_this<Server> {
	public:
		/// Vector of encrypted SVM evaluations
		typedef std::vector<Paillier::Ciphertext> EncryptedSvmValues;

		/// Container for the encrypted cluster votes
		typedef std::vector<Paillier::Ciphertext> EncryptedClusterVotes;

		/// Constructor
		Server (const PaillierPublicKey &key);

		/// Destructor
		~Server () {}

		/// Sets a reference to the client
		void SetClient (const std::shared_ptr<const Hub> &client);

		/// Initializes the internal SVM instances
		void Initialize ();

		/// Performs the interactive secure division protocol
		void InteractiveSecureDivision (const BigInteger &numerator, SecureSvm::EncryptedVector &denominators) const;

		/// Procedure which computes (and returns) the cluster votes for the first block and the medical safety predictions for accuracy analysis
		void GetAccuracyPredictions (Server::EncryptedClusterVotes &clusterVotes, SecureSvm::EncryptedVector &safetyPredictions, const TestDataRow &medicalRelevanceTestData, const std::map<std::string, TestDataRow> &safetyTestData) const;

		/// Procedure which computes (and returns) the predictions generated by the first two blocks and the safety block predictions for performance analysis
		void GetPerformancePredictions (SecureSvm::EncryptedVector &firstTwoBlocksPredictions, SecureSvm::EncryptedVector &SafetyBlockPredictions, const TestDataRow &medicalRelevanceTestData, const std::map<std::string, TestDataRow> &safetyTestData) const;

		/// Returns the unsafe classes for each safety SVM
		std::vector<std::string> GetSafetyBlockSvmsUnsafeClasses () const;

		/// Returns the names of the model files for the safety block
		std::deque<std::string> GetSafetyBlockModelFiles () const;

		/// Sends a request to the client to debug an encrypted value
		void DebugValue (const Paillier::Ciphertext &value) const;

	private:
		/// Define the permutation map container
		typedef std::vector<std::pair<size_t, size_t>> PermutationVector;

		/// A reference to the client.
		/// Use weak_ptr here in order to avoid a circular deadlock with the client which holds a reference back to the server
		std::weak_ptr<const Hub> client;

		/// The crypto provider
		Paillier cryptoProvider;
		
		/// The client public key
		PaillierPublicKey clientPublicKey;

		/// The SVM kernel type
		SecureSvm::KernelTypes kernel;

		/// The number of content items
		unsigned int contentItemCount;

		/// Dummy vector of content items
		std::vector<BigInteger> dummyContentItems;

		/// Dummy vector of encrypted preference scores
		std::vector<Paillier::Ciphertext> dummyEncryptedPreferenceScores;

		/// The maximum size of the blinding factors
		unsigned int blindingFactorSize;

		/// The model files extension
		std::string modelFileExtension;

		/// Medical relevance models folder
		std::string medicalRelevanceModelsDirectory;

		/// The full path to the safety block models directory
		std::string safetyModelsDirectory;

		/// The safety block model files
		std::deque<std::string> safetySvmModelFiles;

		/// Medical Relevance Block SVM models.
		std::vector<std::unique_ptr<SecureSvm>> medicalRelevanceSvms;

		/// Safety Block SVM models.
		std::vector<std::unique_ptr<SecureSvm>> safetySvms;

		/// Number of clusters for the Medical Relevance Block
		unsigned int medicalRelevanceClusterCount;

		/// Stores the number of votes received for each cluster after evaluating the SVMs
		Server::EncryptedClusterVotes encryptedClusterVotes;

		/// Precompute [0] for optimization purposes
		Paillier::Ciphertext encryptedZero;

		/// Precompute [1] for optimization purposes
		Paillier::Ciphertext encryptedOne;

		/// Loads the Medical Relevance block SVM models
		void loadMedicalRelevanceSvmModels (const std::string &modelsDirectory);

		/// Loads the Safety block SVM models
		void loadSafetySvmModels (const std::string &modelsDirectory);

		/// Returns the total number of votes per cluster
		Server::EncryptedClusterVotes getTotalClusterVotes (Server::EncryptedSvmValues &votes) const;

		/// Performs the interactive sign evaluation protocol inplace
		void interactiveSignEvaluation (Server::EncryptedSvmValues &data) const;

		/// Performs the interactive maximum evaluation protocol inplace
		void interactiveMaximumEvaluation (Server::EncryptedClusterVotes &data) const;

		/// Copy constructor - not implemented
		Server (Server const &);

		/// Copy assignment operator - not implemented
		Server operator= (Server const &);
	};
}//namespace SecureRecommendations
}//namespace SeComLib

#endif//SERVER_HEADER_GUARD